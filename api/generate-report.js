// api/generate-report.js
import PDFDocument from "pdfkit";

export const config = {
  api: {
    bodyParser: { sizeLimit: "25mb" },
  },
};

function base64ToBuffer(dataURL) {
  if (!dataURL) return null;
  const matches = dataURL.match(/^data:(image\/\w+);base64,(.+)$/);
  if (!matches) return null;
  return Buffer.from(matches[2], "base64");
}

export default async function handler(req, res) {
  if (req.method !== "POST") {
    res.status(405).json({ error: "Only POST method allowed" });
    return;
  }

  try {
    const {
      title = "Lab Report",
      author = "",
      college = "",
      date = "",
      observations = [],
      chartImageBase64 = null,
      circuitImageBase64 = null,
      calculations = {},
      objective = "",
      apparatus = "",
      description = "",
      procedure = "",
      conclusion = "",
    } = req.body || {};

    res.setHeader("Content-Type", "application/pdf");
    res.setHeader("Content-Disposition", `attachment; filename="${title}.pdf"`);

    const doc = new PDFDocument({ size: "A4", margin: 48 });
    const chunks = [];
    doc.on("data", (c) => chunks.push(c));
    doc.on("end", () => {
      const pdfBuffer = Buffer.concat(chunks);
      res.send(pdfBuffer);
    });

    // Header
    doc.rect(48, 48, doc.page.width - 96, 50).fill("#070707");
    doc.fillColor("#ffd24a").fontSize(18).text(college || "Your College", 60, 60);
    doc.fillColor("#fff").fontSize(12).text(title, 60, 80);

    // Info
    doc.moveDown(2);
    doc.fontSize(10).fillColor("#ff9a4a").text("Student:");
    doc.fillColor("#fff").text(author || "N/A");
    doc.fillColor("#ff9a4a").text("Date:");
    doc.fillColor("#fff").text(date || "N/A");

    // Objective
    doc.moveDown(1);
    doc.fillColor("#ff9a4a").fontSize(12).text("Objective", { underline: true });
    doc.fillColor("#fff").fontSize(10).text(objective || "—");

    // Apparatus
    doc.moveDown(1);
    doc.fillColor("#ff9a4a").text("Apparatus", { underline: true });
    doc.fillColor("#fff").fontSize(10).text(apparatus || "—");

    // Procedure
    doc.moveDown(1);
    doc.fillColor("#ff9a4a").text("Procedure", { underline: true });
    doc.fillColor("#fff").fontSize(10).text(procedure || "—");

    // Observations
    doc.moveDown(1);
    doc.fillColor("#ff9a4a").text("Observations", { underline: true });
    doc.moveDown(0.5);
    doc.fillColor("#fff").fontSize(9);
    observations.forEach((r, i) => {
      doc.text(`${i + 1}. V=${r.V || "-"} I=${r.I || "-"} Remarks=${r.remark || "-"}`);
    });

    // Chart Image
    if (chartImageBase64) {
      const chartBuffer = base64ToBuffer(chartImageBase64);
      if (chartBuffer) {
        doc.addPage();
        doc.fillColor("#ff9a4a").fontSize(12).text("Graph (Auto-Plotted)");
        doc.image(chartBuffer, { fit: [420, 320], align: "center" });
      }
    }

    // Circuit Image
    if (circuitImageBase64) {
      const circuitBuffer = base64ToBuffer(circuitImageBase64);
      if (circuitBuffer) {
        doc.addPage();
        doc.fillColor("#ff9a4a").fontSize(12).text("Circuit Diagram");
        doc.image(circuitBuffer, { fit: [420, 320], align: "center" });
      }
    }

    // Calculations
    doc.addPage();
    doc.fillColor("#ff9a4a").fontSize(12).text("Calculations", { underline: true });
    doc.fillColor("#fff").fontSize(10).text(JSON.stringify(calculations, null, 2));

    // Conclusion
    doc.moveDown(1);
    doc.fillColor("#ff9a4a").fontSize(12).text("Conclusion / Remarks", { underline: true });
    doc.fillColor("#fff").fontSize(10).text(conclusion || "—");

    // Footer
    doc.moveDown(4);
    doc.fontSize(8).fillColor("#888").text("Auto-Generated by BEEE Report Generator", {
      align: "center",
    });

    doc.end();
  } catch (e) {
    console.error("PDF generation failed", e);
    res.status(500).json({ error: "PDF generation failed", details: e.message });
  }
}

// server.cjs — Final Clean Version with Markdown Cleanup (Option 3)
// -----------------------------------------------------------------
import PDFDocument from "pdfkit";

export const config = {
  api: {
    bodyParser: { sizeLimit: "30mb" },
  },
};

// Convert base64 → Buffer
function base64ToBuffer(dataURL) {
  if (!dataURL) return null;
  const match = dataURL.match(/^data:(image\/\w+);base64,(.+)$/);
  if (!match) return null;
  return Buffer.from(match[2], "base64");
}

// ✅ Strip Markdown symbols (*, #, -, etc.)
function stripMarkdown(text) {
  if (!text) return "";
  return text
    .replace(/[#_*`~>\-]+/g, "")         // Remove Markdown symbols
    .replace(/\[(.*?)\]\(.*?\)/g, "$1")  // Convert [text](link) → text
    .replace(/\n{2,}/g, "\n\n")          // Normalize newlines
    .trim();
}

// Section title (orange heading)
function sectionTitle(doc, title) {
  doc.moveDown(1);
  doc.font("Helvetica-Bold")
    .fontSize(14)
    .fillColor("#ffb84a")
    .text(title, { underline: true });
  doc.moveDown(0.3);
  doc.font("Helvetica").fontSize(10).fillColor("#ffffff");
}

// Page background + border
function drawPageBackground(doc) {
  doc.save();
  doc.rect(0, 0, doc.page.width, doc.page.height).fill("#000000");
  doc.restore();

  const margin = 25;
  const width = doc.page.width - margin * 2;
  const height = doc.page.height - margin * 2;
  doc.lineWidth(1)
    .strokeColor("#444444")
    .rect(margin, margin, width, height)
    .stroke();
}

// Footer text
function drawFooter(doc) {
  const footerY = doc.page.height - 40;
  doc.fontSize(8).fillColor("#777");
  doc.text(
    `Page ${doc.page.number}`,
    40,
    footerY,
    { align: "right", width: doc.page.width - 80 }
  );
  doc.text(
    "Auto-generated by BEEE Lab Report Generator",
    0,
    footerY,
    { align: "center" }
  );
}

// -----------------------------------------------------

export default async function handler(req, res) {
  if (req.method !== "POST") {
    res.status(405).json({ error: "Only POST method allowed" });
    return;
  }
  try {
    const {
      title = "Lab Report",
      author = "",
      college = "Your College Name",
      roll = "",
      date = "",
      observations = [],
      chartImageBase64 = null,
      circuitImageBase64 = null,
      calculations = "",
      result = "Auto Result Placeholder",
      objective = "To verify the given experiment.",
      apparatus = "Ammeter, Voltmeter, Resistor, Power Supply, Connecting Wires.",
      description = "Description not provided.",
      procedure = "Connect the circuit as shown.\nIncrease the voltage gradually.\nMeasure current for each voltage.\nPlot V–I graph and calculate resistance.",
      conclusion = "Conclusion not provided.",
    } = req.body || {};

    // ✅ Clean Markdown from text fields
    const cleanObjective = stripMarkdown(objective);
    const cleanDescription = stripMarkdown(description);
    const cleanApparatus = stripMarkdown(apparatus);
    const cleanProcedure = stripMarkdown(procedure);
    const cleanCalculations = stripMarkdown(calculations);
    const cleanResult = stripMarkdown(result);
    const cleanConclusion = stripMarkdown(conclusion);

    // Create PDF
    const doc = new PDFDocument({ size: "A4", margin: 50 });
    res.setHeader("Content-Disposition", `attachment; filename=${title.replace(/\s+/g, "-")}.pdf`);
    res.setHeader("Content-Type", "application/pdf");
    doc.pipe(res);

    // Draw background for first page
    drawPageBackground(doc);
    doc.on("pageAdded", () => {
      drawPageBackground(doc);
      doc.fillColor("#ffffff");
    });

    // ---------------- HEADER / COVER ----------------
    doc.fillColor("#ffb84a")
      .font("Helvetica-Bold")
      .fontSize(20)
      .text(college, { align: "center" });
    doc.moveDown(0.3);
    doc.fillColor("#ffffff").fontSize(12).text(title, { align: "center" });
    doc.moveDown(0.8);

    // Student info
    doc.font("Helvetica").fontSize(10).fillColor("#bbbbbb");
    doc.text(`Student: ${author || "-"}`, 60, 140);
    doc.text(`Date: ${date || "-"}`, 60, 180);

    // ---------------- THEORY / DETAILS ----------------
    sectionTitle(doc, "Objective");
    doc.text(cleanObjective, { align: "justify" });

    sectionTitle(doc, "Description");
    doc.text(cleanDescription, { align: "justify", lineGap: 3 });

    sectionTitle(doc, "Apparatus");
    doc.text(cleanApparatus, { align: "left" });

    sectionTitle(doc, "Procedure");
    cleanProcedure.split("\n").forEach((step) => {
      if (step.trim()) doc.text("• " + step.trim(), { lineGap: 2 });
    });

    // ---------------- OBSERVATION TABLE ----------------
    doc.addPage();
    sectionTitle(doc, "Observation Table");

    const startX = 55;
    const colWidths = [50, 120, 120, 180];
    const headers = ["t", "Voltage (V)", "Current (A)", "Remarks"];
    const totalWidth = colWidths.reduce((a, b) => a + b, 0);
    let y = doc.y;

    // Table header
    doc.rect(startX, y, totalWidth, 20).fill("#ffb84a");
    doc.fillColor("#000").font("Helvetica-Bold").fontSize(10);
    let x = startX;
    headers.forEach((h, i) => {
      doc.text(h, x, y + 5, { width: colWidths[i], align: "center" });
      x += colWidths[i];
    });

    // Table rows
    y += 22;
    observations.forEach((row, i) => {
      const bg = i % 2 === 0 ? "#0a0a0a" : "#131313";
      doc.rect(startX, y, totalWidth, 18).fill(bg);
      doc.fillColor("#ffffff").font("Helvetica").fontSize(9);
      const cols = [row.t ?? i + 1, row.V ?? "", row.I ?? "", row.remark ?? ""];
      let cx = startX;
      cols.forEach((val, j) => {
        doc.text(String(val), cx, y + 4, { width: colWidths[j], align: "center" });
        cx += colWidths[j];
      });
      y += 18;

      // Add new page if table overflows
      if (y > doc.page.height - 80) {
        drawFooter(doc);
        doc.addPage();
        y = 60;
      }
    });

    // ---------------- GRAPH PAGE ----------------
    doc.addPage();
    sectionTitle(doc, "Graph (Auto-Plotted)");
    if (chartImageBase64) {
      try {
        const imgBuf = base64ToBuffer(chartImageBase64);
        doc.image(imgBuf, { fit: [440, 300], align: "center", valign: "center" });
      } catch {
        doc.fillColor("#f55").text("⚠ Failed to embed chart image.");
      }
    } else {
      doc.fillColor("#aaa").text("No chart image provided.");
    }

    // ---------------- CIRCUIT DIAGRAM ----------------
    if (circuitImageBase64) {
      doc.addPage();
      sectionTitle(doc, "Circuit Diagram");
      try {
        const imgBuf = base64ToBuffer(circuitImageBase64);
        doc.image(imgBuf, { fit: [440, 300], align: "center" });
      } catch {
        doc.fillColor("#f55").text("⚠ Error displaying circuit image.");
      }
    }

    // ---------------- CALCULATIONS ----------------
    doc.addPage();
    sectionTitle(doc, "Calculations");
    doc.text(cleanCalculations || "No calculations provided.", { align: "justify" });

    sectionTitle(doc, "Result");
    doc.text(cleanResult || "No result provided.", { align: "justify" });

    sectionTitle(doc, "Conclusion");
    doc.text(cleanConclusion || "No conclusion provided.", { align: "justify" });

    // ---------------- SIGNATURE AREA ----------------
    doc.moveDown(2);
    const signY = doc.y + 30;
    doc.moveTo(60, signY).lineTo(220, signY).stroke("#777");
    doc.text("Student Signature", 60, signY + 5);
    doc.moveTo(340, signY).lineTo(500, signY).stroke("#777");
    doc.text("Instructor Signature", 340, signY + 5);

    // End PDF
    doc.end();
  } catch (err) {
    console.error("PDF generation error:", err);
    res.status(500).json({ error: "Failed to generate PDF" });
  }
}

// server.cjs — Stable PDF Generator (Vercel Safe)

import PDFDocument from "pdfkit";

export const config = {
  api: {
    bodyParser: { sizeLimit: "30mb" },
  },
};

function base64ToBuffer(dataURL) {
  try {
    if (!dataURL) return null;
    const match = dataURL.match(/^data:(image\/\w+);base64,(.+)$/);
    if (!match) return null;
    return Buffer.from(match[2], "base64");
  } catch {
    return null;
  }
}

function stripMarkdown(t = "") {
  return t
    .replace(/[#*_`~>-]+/g, "")
    .replace(/\[(.*?)\]\(.*?\)/g, "$1")
    .replace(/!\[(.*?)\]\(.*?\)/g, "$1")
    .replace(/\n{2,}/g, "\n\n")
    .trim();
}

function sectionTitle(doc, title) {
  doc.moveDown(1);
  doc.font("Helvetica-Bold").fontSize(14).fillColor("#ffb84a").text(title, { underline: true });
  doc.moveDown(0.3);
  doc.font("Helvetica").fontSize(10).fillColor("#ffffff");
}

function drawPageBackground(doc) {
  doc.save();
  doc.rect(0, 0, doc.page.width, doc.page.height).fill("#000000");
  doc.restore();

  const m = 25;
  const w = doc.page.width - m * 2;
  const h = doc.page.height - m * 2;
  doc.lineWidth(1).strokeColor("#444").rect(m, m, w, h).stroke();
}

function drawFooter(doc) {
  const y = doc.page.height - 40;
  doc.fontSize(8).fillColor("#777");
  doc.text(`Page ${doc.page.number}`, 40, y, { align: "right", width: doc.page.width - 80 });
  doc.text("Auto-generated by BEEE Lab Report Generator", 0, y, { align: "center" });
}

export default async function handler(req, res) {
  res.setHeader("Access-Control-Allow-Origin", "*");
  res.setHeader("Access-Control-Allow-Methods", "POST, OPTIONS");
  res.setHeader("Access-Control-Allow-Headers", "Content-Type");
  res.setHeader("Allow", "POST, OPTIONS");

  if (req.method === "OPTIONS") return res.status(200).end();
  if (req.method !== "POST")
    return res.status(405).json({ error: "Only POST method allowed" });


  const body = req.body || {};
  try {
    const {
      title = "Lab Report",
      author = "",
      college = "Your College Name",
      date = "",
      observations = [],
      chartImageBase64,
      circuitImageBase64,
      calculations = "",
      result = "",
      objective = "",
      apparatus = "",
      description = "",
      procedure = "",
      conclusion = "",
    } = body;

    const clean = {
      objective: stripMarkdown(objective),
      description: stripMarkdown(description),
      apparatus: stripMarkdown(apparatus),
      procedure: stripMarkdown(procedure),
      calculations: stripMarkdown(calculations),
      result: stripMarkdown(result),
      conclusion: stripMarkdown(conclusion),
    };

    const doc = new PDFDocument({ size: "A4", margin: 50 });
    doc.on("error", (err) => {
      console.error("PDFKit internal error:", err);
      if (!res.headersSent) res.status(500).end();
    });

    res.setHeader("Content-Type", "application/pdf");
    res.setHeader("Content-Disposition", `attachment; filename="${title.replace(/\s+/g, "_")}.pdf"`);
    doc.pipe(res);

    drawPageBackground(doc);
    doc.on("pageAdded", () => {
      drawPageBackground(doc);
      doc.fillColor("#fff");
    });

    // Cover Page
    doc.fillColor("#ffb84a").font("Helvetica-Bold").fontSize(20).text(college, { align: "center" });
    doc.moveDown(0.3);
    doc.fillColor("#fff").fontSize(12).text(title, { align: "center" });
    doc.moveDown(0.8);
    doc.font("Helvetica").fontSize(10).fillColor("#bbb");
    doc.text(`Student: ${author || "-"}`, 60, 140);
    doc.text(`Date: ${date || "-"}`, 60, 180);

    // Content
    sectionTitle(doc, "Objective");
    doc.text(clean.objective || "Not provided", { align: "justify" });

    sectionTitle(doc, "Description");
    doc.text(clean.description || "Not provided", { align: "justify" });

    sectionTitle(doc, "Apparatus");
    doc.text(clean.apparatus || "Not provided", { align: "left" });

    sectionTitle(doc, "Procedure");
    (clean.procedure || "").split("\n").forEach((s) => doc.text("• " + s.trim(), { lineGap: 2 }));

    // Observations
    doc.addPage();
    sectionTitle(doc, "Observation Table");
    const startX = 55;
    const widths = [50, 120, 120, 180];
    const headers = ["t", "Voltage (V)", "Current (A)", "Remarks"];
    const totalW = widths.reduce((a, b) => a + b, 0);
    let y = doc.y;

    doc.rect(startX, y, totalW, 20).fill("#ffb84a");
    doc.fillColor("#000").font("Helvetica-Bold").fontSize(10);
    let x = startX;
    headers.forEach((h, i) => {
      doc.text(h, x, y + 5, { width: widths[i], align: "center" });
      x += widths[i];
    });

    y += 22;
    observations.forEach((r, i) => {
      const bg = i % 2 ? "#111" : "#0a0a0a";
      doc.rect(startX, y, totalW, 18).fill(bg);
      doc.fillColor("#fff").font("Helvetica").fontSize(9);
      const vals = [r.t ?? i + 1, r.V ?? "", r.I ?? "", r.remark ?? ""];
      let cx = startX;
      vals.forEach((v, j) => {
        doc.text(String(v), cx, y + 4, { width: widths[j], align: "center" });
        cx += widths[j];
      });
      y += 18;
      if (y > doc.page.height - 80) {
        drawFooter(doc);
        doc.addPage();
        y = 60;
      }
    });

    // Chart
    doc.addPage();
    sectionTitle(doc, "Graph (Auto-Plotted)");
    const chartBuf = base64ToBuffer(chartImageBase64);
    if (chartBuf) {
      try {
        doc.image(chartBuf, { fit: [440, 300], align: "center", valign: "center" });
      } catch (e) {
        doc.fillColor("#f55").text("⚠ Chart image invalid or too large.");
      }
    } else {
      doc.fillColor("#aaa").text("No chart image provided.");
    }

    // Circuit
    if (circuitImageBase64) {
      doc.addPage();
      sectionTitle(doc, "Circuit Diagram");
      const circBuf = base64ToBuffer(circuitImageBase64);
      if (circBuf) {
        try {
          doc.image(circBuf, { fit: [440, 300], align: "center" });
        } catch {
          doc.fillColor("#f55").text("⚠ Circuit image invalid.");
        }
      } else doc.fillColor("#aaa").text("No valid circuit image provided.");
    }

    // Calcs + Result
    doc.addPage();
    sectionTitle(doc, "Calculations");
    doc.text(clean.calculations || "No calculations provided.", { align: "justify" });

    sectionTitle(doc, "Result");
    doc.text(clean.result || "No result provided.", { align: "justify" });

    sectionTitle(doc, "Conclusion");
    doc.text(clean.conclusion || "No conclusion provided.", { align: "justify" });

    // Signature
    doc.moveDown(2);
    const sy = doc.y + 30;
    doc.moveTo(60, sy).lineTo(220, sy).stroke("#777");
    doc.text("Student Signature", 60, sy + 5);
    doc.moveTo(340, sy).lineTo(500, sy).stroke("#777");
    doc.text("Instructor Signature", 340, sy + 5);

    drawFooter(doc);
    doc.end();
  } catch (err) {
    console.error("PDF generation error:", err);
    if (!res.headersSent) res.status(500).json({ error: "Failed to generate PDF", details: err.message });
  }
}

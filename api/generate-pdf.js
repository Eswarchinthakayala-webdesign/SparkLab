// /api/generate-pdf.js — Works on Vercel (No require())
// -----------------------------------------------------
import PDFDocument from "pdfkit";

// Convert base64 → Buffer
function base64ToBuffer(dataURL) {
  if (!dataURL) return null;
  const match = dataURL.match(/^data:(image\/\w+);base64,(.+)$/);
  if (!match) return null;
  return Buffer.from(match[2], "base64");
}

// Section title (orange heading)
function sectionTitle(doc, title) {
  doc.moveDown(1);
  doc.font("Helvetica-Bold").fontSize(14).fillColor("#ffb84a").text(title, { underline: true });
  doc.moveDown(0.3);
  doc.font("Helvetica").fontSize(10).fillColor("#ffffff");
}

// Page background + border
function drawPageBackground(doc) {
  doc.save();
  doc.rect(0, 0, doc.page.width, doc.page.height).fill("#000000");
  doc.restore();

  const margin = 25;
  const width = doc.page.width - margin * 2;
  const height = doc.page.height - margin * 2;
  doc.lineWidth(1).strokeColor("#444444").rect(margin, margin, width, height).stroke();
}

// Footer text
function drawFooter(doc) {
  const footerY = doc.page.height - 40;
  doc.fontSize(8).fillColor("#777");
  doc.text(`Page ${doc.page.number}`, 40, footerY, { align: "right", width: doc.page.width - 80 });
  doc.text("Auto-generated by SparkLab Formula Sheet Generator", 0, footerY, { align: "center" });
}

// API Config for larger payloads
export const config = {
  api: {
    bodyParser: { sizeLimit: "30mb" },
  },
};

// ---------------------------------------------------------
export default async function handler(req, res) {
  if (req.method !== "POST") {
    res.status(405).json({ error: "Only POST method allowed" });
    return;
  }

  try {
    const {
      title = "Formula Sheet",
      author = "Anonymous",
      formulas = [],
      chartImageBase64 = null,
      date = new Date().toLocaleString(),
    } = req.body || {};

    // Create PDF in memory
    const doc = new PDFDocument({ size: "A4", margin: 40 });
    const chunks = [];
    doc.on("data", (chunk) => chunks.push(chunk));
    doc.on("end", () => {
      const result = Buffer.concat(chunks);
      res.setHeader("Content-Type", "application/pdf");
      res.setHeader(
        "Content-Disposition",
        `attachment; filename="${title.replace(/\s+/g, "_")}.pdf"`
      );
      res.send(result);
    });

    // Background
    drawPageBackground(doc);
    doc.on("pageAdded", () => {
      drawPageBackground(doc);
      drawFooter(doc);
      doc.fillColor("#ffffff");
    });

    // Header
    doc.fillColor("#ffb84a")
      .font("Helvetica-Bold")
      .fontSize(20)
      .text("SparkLab — Formula Sheet", { align: "center" });
    doc.moveDown(0.3);
    doc.font("Helvetica").fontSize(10).fillColor("#bbb");
    doc.text(`Generated by: ${author} | ${date}`, { align: "center" });
    doc.moveDown(1);

    // Formulas section
    for (let i = 0; i < formulas.length; i++) {
      const f = formulas[i];
      sectionTitle(doc, `${i + 1}. ${f.title} (${f.category || "General"})`);
      doc.font("Helvetica").fontSize(11).fillColor("#ffd24a").text(f.formula || "No formula provided.");
      doc.moveDown(0.2);

      if (f.inputs) {
        doc.font("Helvetica-Oblique").fontSize(9).fillColor("#ccc").text("Inputs:");
        Object.entries(f.inputs).forEach(([k, v]) => doc.text(`  • ${k}: ${v}`));
      }

      if (f.computed) {
        doc.font("Helvetica-Oblique").fontSize(9).fillColor("#ccc").text("Computed:");
        Object.entries(f.computed).forEach(([k, v]) => {
          if (k.endsWith("_unit")) return;
          const unit = f.computed[`${k}_unit`] || "";
          doc.text(`  • ${k}: ${Number.isFinite(v) ? v : v} ${unit}`);
        });
      }

      doc.moveDown(0.3);
      doc.strokeColor("#222")
        .lineWidth(0.3)
        .moveTo(doc.x, doc.y)
        .lineTo(doc.page.width - doc.options.margins.right, doc.y)
        .stroke();
    }

    // Optional chart image
    if (chartImageBase64) {
      doc.addPage();
      sectionTitle(doc, "Chart Visualization");
      try {
        const buf = base64ToBuffer(chartImageBase64);
        doc.image(buf, { fit: [440, 300], align: "center" });
      } catch {
        doc.fillColor("#f55").text("⚠ Unable to embed chart image.");
      }
    }

    doc.end();
  } catch (err) {
    console.error("PDF generation error:", err);
    res.status(500).json({ error: "PDF generation failed" });
  }
}
